package ${package}.controller;

import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.qs.insurance.system.common.core.utils.R;
import ${package}.entity.${className};
import ${package}.service.${className}Service;
import lombok.AllArgsConstructor;
import io.swagger.annotations.Api;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.ApiOperation;


/**
 * ${comments}
 *
 * @author ${author}
 * @date ${datetime}
 */
@Slf4j
@RestController
@AllArgsConstructor
@RequestMapping("/${pathName}")
@Api(value = "${comments}", tags = "${comments}")
public class ${className}Controller {

  private final  ${className}Service ${classname}Service;

  /**
   * 分页查询${comments}
   * @param pageNo 分页数量
   * @param ${classname} ${comments}
   * @return
   */
  @ApiOperation("分页查询${comments}")
  @GetMapping("/page")
  public R get${className}Page(@ApiParam("当前页数") @RequestParam("pageNo") Integer pageNo,
                               @ApiParam("每页显示条数")@RequestParam("pageSize")Integer pageSize) {
    Page<${className}> ${classname}Page = new Page<>(pageNo, pageSize);
    LambdaQueryWrapper<${className}> ${classname}Wrapper = Wrappers.<${className}>query().lambda();
    return  new R<>(${classname}Service.page(${classname}Page,${classname}Wrapper));
  }


  /**
   * 通过id查询${comments}
   * @param ${pk.lowerAttrName} id
   * @return R
   */
  @ApiOperation("通过id查询${comments}")
  @GetMapping("/info/{${pk.lowerAttrName}}")
  public R getById(@PathVariable("${pk.lowerAttrName}") ${pk.attrType} ${pk.lowerAttrName}){
    return new R<>(${classname}Service.getById(${pk.lowerAttrName}));
  }

  /**
   * 新增${comments}
   * @param ${classname} ${comments}
   * @return R
   */
  @ApiOperation("新增${comments}")
  @PostMapping("/save")
  public R save(@RequestBody ${className} ${classname}){
    return new R<>(${classname}Service.save(${classname}));
  }

  /**
   * 修改${comments}
   * @param ${classname} ${comments}
   * @return R
   */
  @ApiOperation("修改${comments}")
  @PostMapping("/update")
  public R updateById(@RequestBody ${className} ${classname}){
    return new R<>(${classname}Service.updateById(${classname}));
  }

  /**
   * 通过ids删除${comments}
   * @return R
   */
  @PostMapping("/delete")
  public R delete(@RequestBody ${pk.attrType}[] ${pk.lowerAttrName}s){
    return new R<>(${classname}Service.removeByIds(Arrays.asList(${pk.lowerAttrName}s)));
  }

}
